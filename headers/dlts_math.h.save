#ifndef DLTS_MATH_H_INCLUDED
#define DLTS_MATH_H_INCLUDED
#include <fstream>
#include <cmath>
#include <vector>
#include <gsl/gsl_fit.h>
#include <gsl/gsl_integration.h>
#include "variable.h"
#include "interpolation.h"

int sgn(double val);

class math_exception: public std::exception
{
    public:
        math_exception(const std::string _message) : exception(), message{_message} {}
        const char* what() const noexcept override
        {
            return static_cast<const char*>(message.c_str());
        }
    private:
        std::string message;
};

/* Экспоненцианальная аппроксимация */
int get_exponent_fitt(const vector<double> *x, const vector<double> *y, const vector<double> *sigma,
                      double *A, double *tau, double *b, double *dA, double *dtau, double *db, double *ReducedChiSqr,
                      size_t *iter, size_t max_iter,
                      double epsabs, double epsrel,
                      string *strStatusMSG);
/* Поиск минимума */
double GoldSerch(double a, double b, double eps, interp &Fun, bool _min = true);
/* Округлить до n значащих цифр после запятой */
double round(double d, int n);
/* Получить параметры линейной регрессии Y = a + b*X */
void GetParam(std::vector<double> const &X, std::vector<double> const &Y, double &a, double &b);
/* Среднее значение */
double Mean(std::vector<double>::const_iterator b,
            std::vector<double>::const_iterator e);
/* Средняя квадратичная флуктуация */
double MeanSquareError(std::vector<double>::const_iterator b,
                       std::vector<double>::const_iterator e);
double MeanSquareErrorOfTemp(std::vector<double>::const_iterator b,
                             std::vector<double>::const_iterator e);
double double_boxcar(double x, double t1);
double lock_in(double x, double t1);
double sin_w(double x, double t1);
double exp_w(double x, double t1);
#endif // DLTS_MATH_H_INCLUDED
