#include <algorithm>
#include "daq.h"
#include "vi.h"
#include "variable.h"
#include "daqmx.h"
#include <functional>

#define PBM_SETPOS (WM_USER+2)

atomic_bool         bfDAQ0k{true};
CRITICAL_SECTION    csDataAcquisition;

INT ReadAnalogSignal(int dev, int ai_port_measurement, int trigger_port, double rate, double gate /*мкс*/, int trigger_edge, int uRange, double measure_time /* мс */, vector<double> *vData)
{
    if(!bfDAQ0k.load()) return -1;
    double extra_gate = 0.0;
    if(Generator.is_active.load())
        extra_gate = Generator.width * 1000;
    else
        trigger_edge = DAQmx_Val_Falling;
    try
    {
        NIDAQmx::Task Device("Temporal Task");
        Device.AddChannel(dev, ai_port_measurement, uRange);
        Device.SetupFiniteAcquisition(rate, measure_time);
        Device.SetupTrigger(trigger_port, trigger_edge, gate + extra_gate);
        Device.Start();
        Device.TryRead(vData);
        Device.Stop();
    }
    catch(NIDAQmx::DAQException const &e)
    {
        bfDAQ0k.store(false);
        #ifndef TEST_MODE
        MessageBox(HWND_DESKTOP, e.description().c_str(), "Warning", MB_ICONWARNING);
        #endif // TEST_MODE
    }
    catch(std::runtime_error const &e)
    {
        bfDAQ0k.store(false);
        MessageBox(HWND_DESKTOP, e.what(), "Warning", MB_ICONWARNING);
    }
    return 0;
}

void CapacityMeasuring(UINT AIPort, double *capacity)
{
    if(!Generator.is_active.load())
    {
        *capacity = 1;
        return;
    }
    vector<double> vResult;
    vResult.reserve(rate_DAQ*(Generator.period - Generator.width)*0.001);
    EnterCriticalSection(&csDataAcquisition);
    Generator.Pulses(vi::switcher::off);
    Sleep(10 * measure_time_DAQ);
    ReadAnalogSignal(id_DAQ, AIPort, pfi_ttl_port,
                rate_DAQ, gate_DAQ, DAQmx_Val_Rising, index_range.load(), (Generator.period - Generator.width),
                &vResult);
    Generator.Pulses(vi::switcher::on);
    LeaveCriticalSection(&csDataAcquisition);
    *capacity = accumulate(vResult.begin(), vResult.end(), static_cast<double>(0.0));
    *capacity /= vResult.size();
}

void Measuring(vector<double> *vResult, UINT AverNum, double time /* мс */, UINT AIPort,  size_t range_index, BOOL bfProgress)
{
    if(vResult == NULL || AverNum < 1) return;
    vector<double> vData;
    vData.reserve(rate_DAQ*0.001*time);
    vResult->clear();
    vResult->reserve(rate_DAQ*0.001*time);
    for(UINT i = 0; i < AverNum; i++)
    {
        EnterCriticalSection(&csDataAcquisition);
        ReadAnalogSignal(id_DAQ, AIPort, pfi_ttl_port,
                    rate_DAQ, gate_DAQ, DAQmx_Val_Rising, range_index, time,
                    &vData);
        LeaveCriticalSection(&csDataAcquisition);
        if(i == 0)
        {
            *vResult = std::move(vData);
            if(AverNum > 1)
                vData.reserve(rate_DAQ*0.001*time);
        }
        else
            std::transform(vData.cbegin(), vData.cend(), vResult->begin(), vResult->begin(), std::plus<double>());
        if(bfProgress) SendMessage(hProgress, PBM_SETPOS, 100.0*i/AverNum, 0);
        vData.clear();
    }
    if(AverNum > 1)
        for(auto &it: *vResult)
            it = it/AverNum;
    if(bfProgress) SendMessage(hProgress, PBM_SETPOS, 0, 0);
}

void PulsesMeasuring(vector<double> *vData, double *dVoltBias, double *dVoltAmp)
{
    static CONST UINT T_NUM = 2, A_NUM = 1;
    *dVoltBias = 0.0;
    *dVoltAmp = 0.0;
    UINT uiCount1 = 0, uiCount2 = 0;
    double dMeasTime = 0.0;
    if(Generator.bfvi0k.load()) dMeasTime = Generator.period*T_NUM;
    else dMeasTime = measure_time_DAQ*T_NUM;
    size_t range_index = 0;
    vector<double> vData2;
    vData2.reserve(rate_DAQ*0.001*dMeasTime);
    Measuring(&vData2, A_NUM, dMeasTime, ai_port_pulse, range_index);
    /* Допустимое отклонение напряжения в Вольтах*/
    double dV = 0.05;
    /* Рассчитываем примерные значения амплитуды и смещения */
    double PredBias = 0.0, PredAmp = 0.0;
    if(Generator.bfvi0k.load())
    {
        PredBias = Generator.bias;
        //if(index_mode.load() == DLTS)
            PredAmp = Generator.amp;
        /*else if(index_mode.load() == AITS)
            PredAmp = Generator.begin_amp;*/
    }
    else
    {
        /* Bias всегда больше либо равен Amp */
        auto AmpBias = minmax_element(vData2.begin(), vData2.end());
        PredAmp = *AmpBias.first;
        PredBias = *AmpBias.second;
    }
    /* Рассчитываем истинные значения амплитуды и смещения */
    for(const auto &v: vData2)
    {
        if( ( v >= (PredBias-dV) ) && ( v <= (PredBias+dV) ) )
        {
            *dVoltBias += v;
            uiCount2++;
        }
        else if( ( v >= (PredAmp-dV) ) && ( v <= (PredAmp+dV) ) )
        {
            *dVoltAmp += v;
            uiCount1++;
        }
    }
    if(uiCount1 != 0)
        *dVoltAmp /= uiCount1;
    else *dVoltAmp = 0.0;
    if(uiCount2 != 0)
        *dVoltBias /= uiCount2;
    else *dVoltBias = 0.0;
    if(std::abs(PredBias) > 10.0)
        *dVoltBias = PredBias;
    if(std::abs(PredAmp) > 10.0)
        *dVoltAmp = PredAmp;
    if(vData != NULL) *vData = vData2;
}


