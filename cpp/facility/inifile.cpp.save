#include "ini.h"
#include <string>
#include <sstream>
#include <iomanip>
#include <tchar.h>

using namespace ini;

Settings::Settings(std::string FileName)
{
    Rename(FileName);
}
VOID Settings::Rename(std::string FileName)
{
    TCHAR szFileName[MAX_PATH], szPath[MAX_PATH];
    GetModuleFileName(NULL, szFileName, MAX_PATH);
    ExtractFilePath(szFileName, szPath);
    Path = std::string(szPath) + FileName;
}
/* Функции чтения */
BOOL Settings::ReadString(std::string section, std::string key, std::string *value, std::string default_value)
{
    char buff[80];
    BOOL status = GetPrivateProfileString(section.c_str(), key.c_str(), default_value.c_str(), buff, sizeof(buff), Path.c_str());
    *value = buff;
    return status;
}
BOOL Settings::ReadDouble(std::string section, std::string key, double *value, std::string default_value)
{
    char buff[80];
    BOOL status = GetPrivateProfileString(section.c_str(), key.c_str(), default_value.c_str(), buff, sizeof(buff), Path.c_str());
    *value = atof(buff);
    return status;
}
BOOL Settings::ReadInt(std::string section, std::string key, int *value, std::string default_value)
{
    char buff[80];
    BOOL status = GetPrivateProfileString(section.c_str(), key.c_str(), default_value.c_str(), buff, sizeof(buff), Path.c_str());
    *value = atoi(buff);
    return status;
}
BOOL Settings::ReadBool(std::string section, std::string key, bool *value, std::string default_value = "0")
{
    char buff[80];
    BOOL status = GetPrivateProfileString(section.c_str(), key.c_str(), default_value.c_str(), buff, sizeof(buff), Path.c_str());
    *value = (atoi(buff) == 0? false : true);
    return status;
}
/* Функции записи */
BOOL Settings::WriteString(std::string section, std::string key, std::string value)
{
    return WritePrivateProfileString(section.c_str(), key.c_str(), value.c_str(), Path.c_str());
}
BOOL Settings::WriteInt(std::string section, std::string key, int value)
{
    std::stringstream buff;
    buff << value;
    return WritePrivateProfileString(section.c_str(), key.c_str(), buff.str().c_str(), Path.c_str());
}
BOOL WriteBool(std::string section, std::string key, bool value)
{
    std::stringstream buff;
    buff << (value == true? 1 : 0);
    return WritePrivateProfileString(section.c_str(), key.c_str(), buff.str().c_str(), Path.c_str());
}
BOOL Settings::WriteDoubleSc(std::string section, std::string key, double value, int prec)
{
    std::stringstream buff;
    buff << std::scientific << std::setprecision(prec);
    return WriteDouble(section, key, value, &buff);
}
BOOL Settings::WriteDoubleFix(std::string section, std::string key, double value, int prec)
{
    std::stringstream buff;
    buff << std::fixed << std::setprecision(prec);
    return WriteDouble(section, key, value, &buff);
}
BOOL Settings::WriteDouble(std::string section, std::string key, double value, std::stringstream *buff)
{
    (*buff) << value;
    return WritePrivateProfileString(section.c_str(), key.c_str(), buff->str().c_str(), Path.c_str());
}

LPTSTR Settings::ExtractFilePath(LPCTSTR FileName, LPTSTR buf)
{
    int i, len = lstrlen(FileName);
    for(i=len-1; i>=0; i--)
    {
        if(FileName[i] == _T('\\'))
            break;
    }
    lstrcpyn(buf, FileName, i+2);
    return buf;
}
