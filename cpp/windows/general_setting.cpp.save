#include <winfunc.h>
#define ID_COMBOBOX_VOLTAGE_RANGE       200
#define ID_COMBOBOX_MODE                201
#define ID_COMBOBOX_RANGE_SULA          202
#define ID_COMBOBOX_PRE_AMP_GAIN_SULA   203
#define WM_INITDLG                      WM_USER

BOOL SettingsWindow_OnInit(HWND, HWND, LPARAM);
BOOL SettingsWindow_OnCommand(HWND, int, HWND, UINT);

/* Оконная функция окна настроек */
INT_PTR CALLBACK stwin_proc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
        HANDLE_MSG(hwnd, WM_INITDIALOG, SettingsWindow_OnInit);
        HANDLE_MSG(hwnd, WM_COMMAND, SettingsWindow_OnCommand);
    }
    return FALSE;
}


//BOOL SettingsWindow_OnCreate(HWND hwnd, LPCREATESTRUCT)
BOOL SettingsWindow_OnInit(HWND hwnd, HWND, LPARAM)
{
    HWND hComboBox_range;
    HWND hComboBox_mode;
    HWND hComboBox_RangeSula;
    HWND hComboBox_PreAmpGain;
    //Вывести возможны настройки диапазонов напряжений
    hComboBox_range = CreateWindow(WC_COMBOBOX, TEXT(""), CBS_DROPDOWNLIST | WS_CHILD | WS_OVERLAPPED | WS_VISIBLE,
    167, 63, 95, 125, hwnd, (HMENU)(ID_COMBOBOX_VOLTAGE_RANGE), hInst, NULL);
    for (int i = 0; i < RANGE_SIZE; i++)
        SendMessage(hComboBox_range, CB_ADDSTRING, 0, (LPARAM)range[i].data());
    SendMessage(hComboBox_range, CB_SETCURSEL, index_range, 0);
    /* Настройка режима эксперимента */
    hComboBox_mode = CreateWindow(WC_COMBOBOX, TEXT(""), CBS_DROPDOWNLIST | WS_CHILD | WS_OVERLAPPED | WS_VISIBLE,
    685, 180, 100, 125, hwnd, (HMENU)(ID_COMBOBOX_MODE), hInst, NULL);
        ComboBox_AddString(hComboBox_mode, "DLTS");
        ComboBox_AddString(hComboBox_mode, "ITS");
        ComboBox_SetCurSel(hComboBox_mode, index_mode);
    /* Настройка SULA.CAPACITY_RANGE */
    hComboBox_RangeSula = CreateWindow(WC_COMBOBOX, TEXT(""), CBS_DROPDOWNLIST | WS_CHILD | WS_OVERLAPPED | WS_VISIBLE,
    300, 70, 100, 125, hwnd, (HMENU)(ID_COMBOBOX_RANGE_SULA), hInst, NULL);
    stringstream buff;
    for(int i = 0; i < 5; i++)
    {
        rewrite(buff) << int_range_sula[i];
        ComboBox_AddString(hComboBox_RangeSula, buff.str().c_str());
    }
    ComboBox_SetCurSel(hComboBox_RangeSula, RANGE_SULA_index);
    /* Настройка SULA.PRE_AMP_GAIN */
    hComboBox_PreAmpGain = CreateWindow(WC_COMBOBOX, TEXT(""), CBS_DROPDOWNLIST | WS_CHILD | WS_OVERLAPPED | WS_VISIBLE,
    300, 130, 100, 125, hwnd, (HMENU)(ID_COMBOBOX_PRE_AMP_GAIN_SULA), hInst, NULL);
    for(int i = 0; i < 7; i++)
    {
        rewrite(buff) << int_pre_amp_gain[i];
        ComboBox_AddString(hComboBox_PreAmpGain, buff.str().c_str());
    }
    ComboBox_SetCurSel(hComboBox_PreAmpGain, PRE_AMP_GAIN_SULA_index);
    /* Вывод значений в эдитбокс */
    PostMessage(hwnd, WM_COMMAND, WM_INITDLG, 0);
    return TRUE;
}

BOOL SettingsWindow_OnCommand(HWND hwnd, int ID, HWND, UINT codeNotify)
{
    static UINT index_mode = ::index_mode;
    static BOOL GenAgilent_is_active = Generator.is_active;
    switch(ID)
    {
        case WM_INITDLG:
            {
                stringstream buff;
                buff << setprecision(2) << fixed;
                /* Вывод информации при инициализации */
                //Вывести текущие настройки шага стабилизации
                rewrite(buff) << Thermostat.TempStep;
                SetDlgItemText(hwnd, ID_EDITCONTROL_STEP, buff.str().data());
                //Вывести текущие настройки допустимого разброса
                rewrite(buff) << Thermostat.TempDisp;
                SetDlgItemText(hwnd, ID_EDITCONTROL_DISPERSION, buff.str().data());
                //Вывести текущие настройки сэмплов
                rewrite(buff) << measure_time_DAQ;
                SetDlgItemText(hwnd, ID_EDITCONTROL_MEASURE_TIME, buff.str().data());
                //Вывести текущие настройки скорости чтения DQA
                rewrite(buff) << setprecision(0) << rate_DAQ << setprecision(2);
                SetDlgItemText(hwnd, ID_EDITCONTROL_RATE, buff.str().data());
                //Вывести текущие настройки усреднения считанных данных DAQ
                rewrite(buff) << averaging_DAQ;
                SetDlgItemText(hwnd, ID_EDITCONTROL_AVERAGING, buff.str().data());
                //Вывести текущие настройки длительности ворот
                rewrite(buff) << gate_DAQ;
                SetDlgItemText(hwnd, ID_EDITCONTROL_GATE, buff.str().data());
                //Вывести текущие настройки пути к файлу сохранений
                rewrite(buff) << FileSaveName;
                SetDlgItemText(hwnd, ID_EDITCONTROL_FILE_SAVE_NAME, buff.str().data());
                //Вывести текущие настройки имени файла сохранений
                rewrite(buff) << FileSavePath;
                SetDlgItemText(hwnd, ID_EDITCONTROL_SAVE_PATH, buff.str().data());
                /* Настройки генератора импульсов */
                //Вывести текущие настройки периода
                rewrite(buff) << Generator.period;
                SetDlgItemText(hwnd, ID_EDITCONTROL_PERIOD, buff.str().data());
                //Вывести текущие настройки ширины импульсов
                rewrite(buff) << Generator.width;
                SetDlgItemText(hwnd, ID_EDITCONTROL_WIDTHPULSE, buff.str().data());
                //Вывести текущие настройки амплитуды импульса в вольтах
                rewrite(buff) << setprecision(3);
                rewrite(buff) << Generator.amplitude;
                SetDlgItemText(hwnd, ID_EDITCONTROL_AMPLITUDE, buff.str().data());
                //Вывести текущие настройки смещения импульса в вольтах
                rewrite(buff) << Generator.bias;
                SetDlgItemText(hwnd, ID_EDITCONTROL_BIAS, buff.str().data());
                //Вывести текущие настройки шага ITS в вольтах
                rewrite(buff) << Generator.step_voltage;
                SetDlgItemText(hwnd, ID_EDITCONTROL_STEP_AMPLITUDE, buff.str().data());
                //Вывести текущие настройки старта ITS в вольтах
                rewrite(buff) << Generator.begin_amplitude;
                SetDlgItemText(hwnd, ID_EDITCONTROL_BEGIN_AMPLITUDE, buff.str().data());
                //Вывести текущие настройки конца ITS в вольтах
                rewrite(buff) << Generator.end_amplitude;
                SetDlgItemText(hwnd, ID_EDITCONTROL_END_AMPLITUDE, buff.str().data());
                rewrite(buff) << setprecision(2);
                //Вывести текущие настройки режима генератора (SULA\AGILENT)
                CheckDlgButton(hwnd, ID_CHECKBOX_USE_GENERATOR, GenAgilent_is_active);
                PostMessage(hwnd, WM_COMMAND, ID_CHECKBOX_USE_GENERATOR, 0);
                //Вывести текущие настройки эффективной массы
                rewrite(buff) << setprecision(3) << scientific << ::dEfMass;
                SetDlgItemText(hwnd, ID_EDITCONTROL_EFFECTIVE_MASS, buff.str().data());
                //Вывести текущие настройки фактора вырождения
                rewrite(buff) << setprecision(0) << fixed;
                rewrite(buff) << ::dFactorG;
                SetDlgItemText(hwnd, ID_EDITCONTROL_G, buff.str().data());
            }
        return TRUE;
        /* Показать окно с сигналом, идущим на образец */
        case ID_BUTTON_PID_SETTINGS:
            DialogBox(hInst, MAKEINTRESOURCE(ID_PID_SETTINGS_WINDOW), hwnd, (DLGPROC)pidlg_proc);
        return TRUE;
        case ID_BUTTON_ADVANCED_SETTINGS:
            DialogBox(hInst, MAKEINTRESOURCE(ID_ADVANCED_SETTINGS_WINDOW), hwnd, (DLGPROC)asdlg_proc);
        return TRUE;
        case ID_BUTTON_CORRELATION_SETTINGS:
            DialogBox(hInst, MAKEINTRESOURCE(ID_CORRELATION_SETTINGS_WINDOW), hwnd, (DLGPROC)csdlg_proc);
        return TRUE;
        case ID_BUTTON_CLOSE_SETTINGS:
            /* Возврат статических переменных */
            GenAgilent_is_active = Generator.is_active;
            index_mode = ::index_mode;
            DestroyWindow(hwnd);
        return TRUE;
        /* Изменилось состояние чекбокса */
        case ID_CHECKBOX_USE_GENERATOR:
            {
            bool CBState = SendMessage(GetDlgItem(hwnd, ID_CHECKBOX_USE_GENERATOR), BM_GETCHECK, 0, 0);
            if(CBState == false)
            {
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_PERIOD), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_WIDTHPULSE), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_AMPLITUDE), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_BIAS), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_STEP_AMPLITUDE), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_BEGIN_AMPLITUDE), FALSE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_END_AMPLITUDE), FALSE);
            }
            else
            {
                /* Блокировка опций в зависимости от режима */
                BOOL state = TRUE;
                if(index_mode == ITS)
                    state = FALSE;
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_PERIOD),           TRUE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_WIDTHPULSE),       TRUE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_AMPLITUDE),        state);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_BIAS),             TRUE);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_STEP_AMPLITUDE),  !state);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_BEGIN_AMPLITUDE), !state);
                EnableWindow(GetDlgItem(hwnd, ID_EDITCONTROL_END_AMPLITUDE),   !state);
            }
            GenAgilent_is_active = CBState;
            }
            return TRUE;
        case ID_COMBOBOX_MODE:
            if(codeNotify == CBN_SELCHANGE)
            {
                index_mode = SendMessage(GetDlgItem(hwnd, ID_COMBOBOX_MODE), CB_GETCURSEL, 0, 0);
                PostMessage(hwnd, WM_COMMAND, ID_CHECKBOX_USE_GENERATOR, 0);
            }
            return TRUE;
        case ID_EDITCONTROL_SAVE_PATH:
            break;
        case ID_BUTTON_APPLY_SETTINGS:
            if(start)
            {
                MessageBox(hwnd, "Stop the experiment and try again.", "Warning", MB_ICONWARNING);
                return TRUE;
            }
            {
                bool alright = true;
                /* Общие настройки */
                //Применить настройки пути файла сохранений
                FileSavePath = ApplySettingEditBoxString(hwnd, ID_EDITCONTROL_SAVE_PATH);
                //Применить настройки имени файла сохранений
                FileSaveName = ApplySettingEditBoxString(hwnd, ID_EDITCONTROL_FILE_SAVE_NAME);
                //Применить настройки режима работы программы
                index_mode = SendMessage(GetDlgItem(hwnd, ID_COMBOBOX_MODE), CB_GETCURSEL, 0, 0);
                /* Настройки LakeShore */
                //Применить настройки шага стабилизации
                Thermostat.TempStep = ApplySettingEditBox(hwnd, ID_EDITCONTROL_STEP, 2);
                //Применить настройки допустимого разброса
                Thermostat.TempDisp = ApplySettingEditBox(hwnd, ID_EDITCONTROL_DISPERSION, 2);
                /* Настройки измерений */
                //Применить настройки времени измерения
                measure_time_DAQ = ApplySettingEditBox(hwnd, ID_EDITCONTROL_MEASURE_TIME);
                //Применить настройки скорости чтения DQA
                rate_DAQ = ApplySettingEditBox(hwnd, ID_EDITCONTROL_RATE);
                //Применить настройки усреднения считанных данных DAQ
                averaging_DAQ = ApplySettingEditBox(hwnd, ID_EDITCONTROL_AVERAGING);
                //Применить настройки длительности ворот
                gate_DAQ = ApplySettingEditBox(hwnd, ID_EDITCONTROL_GATE, 2);
                //Применить настройки диапазона напряжений
                index_range = ComboBox_GetCurSel(GetDlgItem(hwnd, ID_COMBOBOX_VOLTAGE_RANGE));
                /* Настройки SULA */
                //Применить настройки диапазона напряжений
                RANGE_SULA_index = ComboBox_GetCurSel(GetDlgItem(hwnd, ID_COMBOBOX_RANGE_SULA));
                //Применить настройки диапазона напряжений
                PRE_AMP_GAIN_SULA_index = ComboBox_GetCurSel(GetDlgItem(hwnd, ID_COMBOBOX_PRE_AMP_GAIN_SULA));
                /* Настройки генератора импульсов */
                //Применить настройки периода
                Generator.period = ApplySettingEditBox(hwnd, ID_EDITCONTROL_PERIOD, 2);
                //Вывести текущие настройки ширины импульсов
                Generator.width = ApplySettingEditBox(hwnd, ID_EDITCONTROL_WIDTHPULSE, 2);
                if(Generator.width >= Generator.period) alright = false;
                //Применить настройки амплитуды импульса в вольтах
                Generator.amplitude = ApplySettingEditBox(hwnd, ID_EDITCONTROL_AMPLITUDE, 3);
                if(Generator.amplitude > MAX_VOLTAGE_PULSE || Generator.amplitude < MIN_VOLTAGE_PULSE) alright = false;
                //Применить настройки смещения импульса в вольтах
                Generator.bias = ApplySettingEditBox(hwnd, ID_EDITCONTROL_BIAS, 3);
                if(Generator.bias < MIN_VOLTAGE_PULSE || Generator.bias > MAX_VOLTAGE_PULSE) alright = false;
                if(index_mode == ITS)
                {
                    //Применить настройки шага ITS в вольтах
                    Generator.step_voltage = ApplySettingEditBox(hwnd, ID_EDITCONTROL_STEP_AMPLITUDE, 3);
                    //Применить настройки начала ITS в вольтах
                    Generator.begin_amplitude = ApplySettingEditBox(hwnd, ID_EDITCONTROL_BEGIN_AMPLITUDE, 3);
                    //Применить настройки конца ITS в вольтах
                    Generator.end_amplitude = ApplySettingEditBox(hwnd, ID_EDITCONTROL_END_AMPLITUDE, 3);
                    if(Generator.begin_amplitude < MIN_VOLTAGE_PULSE || Generator.begin_amplitude > MAX_VOLTAGE_PULSE) alright = false;
                    else if(Generator.end_amplitude < MIN_VOLTAGE_PULSE || Generator.end_amplitude > MAX_VOLTAGE_PULSE) alright = false;
                    else if(Generator.end_amplitude < Generator.begin_amplitude && Generator.step_voltage > 0.0) alright = false;
                    else if(Generator.end_amplitude > Generator.begin_amplitude && Generator.step_voltage < 0.0) alright = false;
                }
                //Применить настройки эффективной массы
                {
                    stringstream buff;
                    buff << setprecision(3) << scientific;
                    GetDlgItemTextMod(hwnd, ID_EDITCONTROL_EFFECTIVE_MASS, buff);
                    ::dEfMass = atof(buff.str().data());
                }
                //Применить настройки фактора вырождения
                ::dFactorG = ApplySettingEditBox(hwnd, ID_EDITCONTROL_G, 0);
                //Применить настройки к физическим устройствам и сохранить файл настроек при условии их корректности
                if(alright == true)
                {
                    Generator.is_active = GenAgilent_is_active;
                    ::index_mode = index_mode;
                    ApplySettings();
                    write_settings();
                    PlotDLTS(); /* При обновлении модели эксперимента это необходимо */
                }
                else
                    MessageBox(hwnd, "Incorrect settings.\nYou should be more careful.", "Warning", MB_ICONWARNING);
            }
        return TRUE;
    }
    return FALSE;
}
