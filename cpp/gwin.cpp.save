#include <algorithm>
#include <cctype>
#include <cmath>

#include "gwin.h"


#define DEFAULT_HEIGHT_FONT     80
#define DEFAULT_WIDTH_FONT      20
#define DEFAULT_PRECISION       3
#define GWND_LOGICAL_SIZE       1200
#define GPLOT_LOGICAL_SIZE      950
#define GPLOT_LOGICAL_X_BEGIN   200
#define GPLOT_LOGICAL_Y_BEGIN   150
using namespace gwin;

namespace gwin
{
    struct gPlotInfo
    {
        ~gPlotInfo()
        {
            DeleteObject((HBITMAP)hBitMap);
            DeleteObject((HPEN)hAxisPen);
            DeleteObject((HPEN)hPlotPen);
            DeleteObject((HPEN)hGridPen);
            DeleteObject((HFONT)hTextFont);
        }
        gPlotInfo():
            hBitMap{NULL},
            iMark1{5}, iMark2{10}, iAdMark1{2}, iAdMark2{0},
            iPrec1{DEFAULT_PRECISION}, iPrec2{DEFAULT_PRECISION},
            iSubInfoAligment{ALIGMENT::LEFT},
            hAxisPen{CreatePen(PS_SOLID, 0, RGB(255,255,255))},
            hPlotPen{CreatePen(PS_SOLID, 0, RGB(255,215,0))},
            hGridPen{CreatePen(PS_DOT, 0, RGB(50,50,50))},
            crAxisSubscribeColor{RGB(255,215,0)}, crAdInfoColor{RGB(255,255,255)},
            hTextFont{CreateFont(DEFAULT_HEIGHT_FONT, DEFAULT_WIDTH_FONT, 0, 0, FW_HEAVY, 0, 0, 0,
                                 DEFAULT_CHARSET, OUT_STROKE_PRECIS, CLIP_EMBEDDED,
                                 PROOF_QUALITY, FIXED_PITCH | FF_MODERN, "Courier New")},
            sType{NORMAL},
            bfEnableGrid{true}, bfEnableAdInfo{true}, bfEnableScale{true}, bfEnableAxis{true},
            bfEnableScCor{true}, bfEnableCross{false}, bfEnableFixedXBand{false}, bfEnableFixedYBand{false},
            bfEnableTitles{true}, bfEnableMainTitle{true},
            strAdInfo{}, xAxisInfo{}, yAxisInfo{}, MainTitle{},
            dMinX{0.0}, dMaxX{0.0}, dMinY{0.0}, dMaxY{0.0} {}
        HBITMAP hBitMap;
        UINT iMark1, iMark2, iAdMark1, iAdMark2;
        INT iPrec1, iPrec2;
        ALIGMENT iSubInfoAligment;
        HPEN hAxisPen, hPlotPen, hGridPen;
        COLORREF crAxisSubscribeColor, crAdInfoColor;
        HFONT hTextFont;
        SCALETYPE sType;
        BOOL bfEnableGrid, bfEnableAdInfo, bfEnableScale, bfEnableAxis,
            bfEnableScCor, bfEnableCross, bfEnableFixedXBand, bfEnableFixedYBand,
            bfEnableTitles, bfEnableMainTitle;
        /*
        bfEnableGrid        отображать сетку
        bfEnableAdInfo      отображать доп. информацию, см. метод gAddInfo
        bfEnableScale       отображать масштаб на осях
        bfEnableAxis        отображать оси
        bfEnableScCor       автоматически корректировать масштабные множители (10^3, 10^6 и т.п.)
        bfEnableCross       отображать метки, см. vCrossX, vCrossY
        bfEnableFixedXBand  диапазон отображаемых значений оси x фиксирован
        bfEnableFixedYBand  диапазон отображаемых значений оси y фиксирован
        */
        std::string strAdInfo;
        std::string xAxisInfo;
        std::string yAxisInfo;
        std::string MainTitle;
        double dMinX, dMaxX, dMinY, dMaxY;
        gVector vCrossX, vCrossY;
    };

    class gBuffer
    {
        public:
            std::stringstream& operator<<(double dNum)
            {
                buffer.str("");
                buffer << dNum;
                return buffer;
            }
            std::stringstream& operator<<(std::string str)
            {
                buffer.str("");
                buffer << str;
                return buffer;
            }
            std::stringstream& operator>>(std::string& str)
            {
                buffer >> str;
                return buffer;
            }
            std::string str()
            {
                return buffer.str();
            }
            void fixed()
            {
                buffer << std::fixed;
            }
            void scientific()
            {
                buffer << std::scientific;
            }
            void setprecision(int p)
            {
                buffer << std::setprecision(p);
            }
        private:
            std::stringstream buffer;
    };

    std::map<HWND, gPlotInfo> _gMap;

    VOID gWindowMetric(HWND hWnd, LONG *iWidth, LONG *iHeight);
    VOID gClearBitmap(HWND hWnd);
    VOID gTransformPlot(HWND hWnd, HDC &hdc);
    BOOL gMulDrawPlot(HWND hWnd, HDC &hdc, const gVector *vData1, const gMulVector *vMulData2);
    BOOL gDrawPlot(HWND hWnd, HDC &hdc, const gVector *vData1, const gVector *vData2);
    BOOL gDrawLegend(HWND hWnd, HDC& hdc);
    BOOL gEmbedBitmap(HWND hWnd, HDC &hdc);
    BOOL gSplit(const std::string &str, gInfoVector *vInfo);

    LRESULT CALLBACK _gWinProcess (HWND, UINT, WPARAM, LPARAM);
    VOID _gOnCommand(HWND, int, HWND, UINT);
    VOID _gOnPaint(HWND hWnd);
    VOID _gOnLButtonDown(HWND hWnd, BOOL, INT, INT, UINT);

    VOID _gInsertSpaces(std::string &str);
}

/* ********************** */
/*  Интерфейс библиотеки  */
/* ********************** */

BOOL gwin::gScale(HWND hWnd, SCALETYPE type)
{
    _gMap.at(hWnd).sType = type;
}

BOOL gwin::gTitle(HWND hWnd, std::string str)
{
    _gMap.at(hWnd).MainTitle = str;
    return TRUE;
}
BOOL gwin::gAxisInfo(HWND hWnd, std::string xstr, std::string ystr)
{
    _gMap.at(hWnd).xAxisInfo = xstr;
    _gInsertSpaces(ystr);
    _gMap.at(hWnd).yAxisInfo = ystr;
    return TRUE;
}
BOOL gwin::gBandGet(HWND hWnd, double* dMinX, double* dMaxX, double* dMinY, double* dMaxY)
{
    if(dMinX != NULL)
        *dMinX = _gMap.at(hWnd).dMinX;
    if(dMaxX != NULL)
        *dMaxX = _gMap.at(hWnd).dMaxX;
    if(dMinY != NULL)
        *dMinY = _gMap.at(hWnd).dMinY;
    if(dMaxY != NULL)
        *dMaxY = _gMap.at(hWnd).dMaxY;
    return TRUE;
}

BOOL gwin::gDvToLp(HWND hWnd, gPoint *pt)
{
    if(pt == nullptr)
        return FALSE;
    static CONST LONG iWndSize = GWND_LOGICAL_SIZE; // Размер окна в логических единицах
    LONG iWidth, iHeight;
    gWindowMetric(hWnd, &iWidth, &iHeight); // Размеры клиентской области в пикселях
    pt->x = iWndSize * pt->x / iWidth - GPLOT_LOGICAL_X_BEGIN;
    pt->y = iWndSize - iWndSize * pt->y / iHeight - GPLOT_LOGICAL_Y_BEGIN;
    return TRUE;
}
BOOL gwin::gLpToGp(HWND hWnd, gPoint *pt)
{
    if(pt == nullptr)
        return FALSE;
    // Логические координаты в координаты графика //
    pt->x = (pt->x)/GPLOT_LOGICAL_SIZE * (_gMap.at(hWnd).dMaxX - _gMap.at(hWnd).dMinX) + _gMap.at(hWnd).dMinX;
    pt->y = (pt->y)/GPLOT_LOGICAL_SIZE * (_gMap.at(hWnd).dMaxY - _gMap.at(hWnd).dMinY) + _gMap.at(hWnd).dMinY;
    return TRUE;
}

BOOL gwin::gGpToLp(HWND hWnd, gPoint *pt)
{
    if(pt == nullptr)
        return FALSE;
    // Координаты графика в логические координаты //
    pt->x = (pt->x - _gMap.at(hWnd).dMinX)/(_gMap.at(hWnd).dMaxX - _gMap.at(hWnd).dMinX) * GPLOT_LOGICAL_SIZE;
    pt->y = (pt->y - _gMap.at(hWnd).dMinY)/(_gMap.at(hWnd).dMaxY - _gMap.at(hWnd).dMinY) * GPLOT_LOGICAL_SIZE;
    return TRUE;
}

BOOL gwin::gCross(HWND hWnd, gVector const *vData1, gVector const *vData2)
{
    if(vData1->size() == 0 || vData2->size() == 0 || vData1->size() != vData2->size())
        return FALSE;
    _gMap.at(hWnd).bfEnableCross = true;
    _gMap.at(hWnd).vCrossX = *vData1;
    _gMap.at(hWnd).vCrossY = *vData2;
    return TRUE;
}

BOOL gwin::gDefaultPlot(HWND hWnd, std::string message)
{
    gwin::gVector vData1, vData2;
    vData1.push_back(0);
    vData1.push_back(1);
    vData2.push_back(0);
    vData2.push_back(1);
    BOOL fbOldEnableScale   = _gMap.at(hWnd).bfEnableScale,
         fbOldEnableAxis    = _gMap.at(hWnd).bfEnableAxis,
         bfOldEnableGrid    = _gMap.at(hWnd).bfEnableGrid,
         bfOldEnableTitles  = _gMap.at(hWnd).bfEnableTitles,
         bfOldEnableMainTitle = _gMap.at(hWnd).bfEnableMainTitle;
    _gMap.at(hWnd).bfEnableScale = FALSE;
    _gMap.at(hWnd).bfEnableAxis = FALSE;
    _gMap.at(hWnd).bfEnableGrid = FALSE;
    _gMap.at(hWnd).bfEnableTitles = FALSE;
    _gMap.at(hWnd).bfEnableMainTitle = FALSE;
    HPEN hOldPlotPen = _gMap.at(hWnd).hPlotPen;
    _gMap.at(hWnd).hPlotPen = CreatePen(PS_NULL, 0, RGB(0,0,0));
    gAdditionalInfo(hWnd, message.data());
    gData(hWnd, &vData1, &vData2);  /* Отрисовываем стандартное окно */
    DeleteObject((HPEN)_gMap.at(hWnd).hPlotPen);
    /* Возвращаем настройки */
    _gMap.at(hWnd).hPlotPen = hOldPlotPen;
    _gMap.at(hWnd).bfEnableScale = fbOldEnableScale;
    _gMap.at(hWnd).bfEnableAxis = fbOldEnableAxis;
    _gMap.at(hWnd).bfEnableGrid = bfOldEnableGrid;
    _gMap.at(hWnd).bfEnableTitles = bfOldEnableTitles;
    _gMap.at(hWnd).bfEnableMainTitle = bfOldEnableMainTitle;
    return TRUE;
}

BOOL gwin::gBand(HWND hWnd, double dMinX, double dMaxX, double dMinY, double dMaxY)
{
        _gMap.at(hWnd).dMinX = dMinX;
        _gMap.at(hWnd).dMaxX = dMaxX;
        _gMap.at(hWnd).dMinY = dMinY;
        _gMap.at(hWnd).dMaxY = dMaxY;
    if(dMinX == dMaxX) _gMap.at(hWnd).bfEnableFixedXBand = false;
    else _gMap.at(hWnd).bfEnableFixedXBand = true;
    if(dMinY == dMaxY) _gMap.at(hWnd).bfEnableFixedYBand = false;
    else _gMap.at(hWnd).bfEnableFixedYBand = true;
    return TRUE;
}

BOOL gwin::gPrecision(HWND hWnd, INT iPrec1, INT iPrec2)
{
    _gMap.at(hWnd).iPrec1 = iPrec1;
    _gMap.at(hWnd).iPrec2 = iPrec2;
    return TRUE;
}

BOOL gwin::gMark(HWND hWnd, int iMark1, int iMark2, int iAdMark1, int iAdMark2)
{
    if(iMark1 < 0 || iMark2 < 0 || iAdMark1 < 0 || iAdMark2 < 0)
        return FALSE;
    if(iMark1 != 0)
        _gMap.at(hWnd).iMark1 = iMark1;
    if(iMark2 != 0)
        _gMap.at(hWnd).iMark2 = iMark2;
    if(iAdMark1 != 0)
        _gMap.at(hWnd).iAdMark1 = iAdMark1;
    if(iAdMark2 != 0)
    _gMap.at(hWnd).iAdMark2 = iAdMark2;
    return TRUE;
}

BOOL gwin::gAdditionalInfo(HWND hWnd, std::string str, ALIGMENT iAligment)
{
    if(str.empty())
    {
        _gMap.at(hWnd).bfEnableAdInfo = FALSE;
        return FALSE;
    }
    _gMap.at(hWnd).iSubInfoAligment = iAligment;
    _gMap.at(hWnd).strAdInfo = str;
    _gMap.at(hWnd).bfEnableAdInfo = TRUE;
    return TRUE;
}

HWND gwin::gCreateWindow(HINSTANCE hInst, HWND hWndParent, DWORD style)
{
    const std::string strClass = "gWinClass";
    WNDCLASS wc = {0};
    wc.lpfnWndProc = _gWinProcess;
    wc.hInstance = hInst;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(WHITE_BRUSH);
    wc.lpszClassName = strClass.c_str();
    RegisterClass(&wc);
    HWND hWnd = CreateWindow(strClass.c_str(), "", style, 0, 0, 100, 100, hWndParent, NULL, hInst, NULL);
    _gMap[hWnd];
    return hWnd;
}

BOOL gwin::gClose(HWND hWnd)
{
    _gMap.erase(hWnd);
    return DestroyWindow(hWnd);
}

BOOL gwin::gMulData(HWND hWnd, gVector const *vData1, gMulVector const *vMulData)
{
    /** Проверка полноты **/
    if(vData1->size() == 0)
        return FALSE;
    /** Подготовка к отрисовке **/
    LONG iWidth, iHeight;
    gWindowMetric(hWnd, &iWidth, &iHeight);
    HDC hdc = GetDC(hWnd);
    HDC hMemDC = CreateCompatibleDC(hdc);
    HBITMAP bitPlot = CreateCompatibleBitmap(hdc, iWidth, iHeight);
    SelectObject(hMemDC, bitPlot);
    gTransformPlot(hWnd, hMemDC);
    /** Отрисовка графика в буфере памяти **/
    PatBlt(hMemDC, 0, 0, iWidth, iHeight, BLACKNESS);
    gMulDrawPlot(hWnd, hMemDC, vData1, vMulData);
    /** Конец отрисовки графика **/
    gClearBitmap(hWnd);
    _gMap.at(hWnd).hBitMap = bitPlot;
    /** Конец отрисовки **/
    DeleteDC(hMemDC);
    ReleaseDC(hWnd, hdc);
    InvalidateRect(hWnd, NULL, FALSE);
    return TRUE;
}

BOOL gwin::gData(HWND hWnd, gVector const *vData1, gVector const *vData2)
{
    /** Проверка полноты **/
    if(vData1->empty())
        return FALSE;
    const gMulVector vMulData2{*vData2};
    return gMulData(hWnd, vData1, &vMulData2);
}

BOOL gwin::gPosition(HWND hWnd, INT x, INT y)
{
    return SetWindowPos(hWnd, NULL, x, y, 0, 0, SWP_NOZORDER | SWP_NOSIZE);
}

BOOL gwin::gSize(HWND hWnd, INT width, INT height)
{
    return SetWindowPos(hWnd, NULL, 0, 0, width, height, SWP_NOZORDER | SWP_NOMOVE);
}

BOOL gwin::gFont(HWND hWnd, int iHeight, int iWidth, int iAngle, int iWeight, std::string strFontName)
{
    if(iWeight < 0 || iWeight > 1000) return FALSE;
    if(iWeight == 0) iWeight = FW_NORMAL;
    if(iHeight == 0) iHeight = DEFAULT_HEIGHT_FONT;
    if(iWidth  == 0) iWidth  = DEFAULT_WIDTH_FONT;
    DeleteObject((HFONT)_gMap.at(hWnd).hTextFont);
    _gMap.at(hWnd).hTextFont = CreateFont(iHeight, iWidth, 0, iAngle, iWeight, 1, 0, 0,
                             DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS,
                             PROOF_QUALITY, FIXED_PITCH | FF_MODERN, strFontName.c_str());
    return TRUE;
}


/* **************************************************************** */
/* Внутренние функции библиотеки. Закрыты для общего использования. */
/* **************************************************************** */
VOID gwin::gWindowMetric(HWND hWnd, LONG *iWidth, LONG *iHeight)
{
    RECT rc;
    GetClientRect(hWnd, &rc);
    *iWidth = abs(abs(rc.right)-abs(rc.left));
    *iHeight = abs(abs(rc.top)-abs(rc.bottom));
}

VOID gwin::gClearBitmap(HWND hWnd)
{
    if(_gMap.find(hWnd) != _gMap.end())
        DeleteObject((HBITMAP)_gMap.at(hWnd).hBitMap);
}

VOID gwin::gTransformPlot(HWND hWnd, HDC &hdc)
{
    LONG iWidth, iHeight;
    gWindowMetric(hWnd, &iWidth, &iHeight);
    SetMapMode(hdc, MM_ANISOTROPIC);
    SetWindowExtEx(hdc, GWND_LOGICAL_SIZE, -GWND_LOGICAL_SIZE, NULL);
    SetViewportExtEx(hdc, iWidth, iHeight, NULL);
}

BOOL gwin::gMulDrawPlot(HWND hWnd, HDC &hdc, const gVector *vData1, const gMulVector *vMulData2)
{
    static CONST LONG iPlotSize = GPLOT_LOGICAL_SIZE; /* Размер графика в логических единицах */

    HPEN hAxisPen = _gMap.at(hWnd).hAxisPen,
         hPlotPen = _gMap.at(hWnd).hPlotPen,
         hGridPen = _gMap.at(hWnd).hGridPen,
         hOldPen;
    BOOL bfEnableScale = _gMap.at(hWnd).bfEnableScale,
         bfEnableAxis  = _gMap.at(hWnd).bfEnableAxis,
         bfEnableGrid  = _gMap.at(hWnd).bfEnableGrid,
         bfEnableScCor = _gMap.at(hWnd).bfEnableScCor;
    INT iIndent = iPlotSize/100;
    UINT iMark1 = _gMap.at(hWnd).iMark1, iMark2 = _gMap.at(hWnd).iMark2,
         iAdMark1 = _gMap.at(hWnd).iAdMark1,  iAdMark2 = _gMap.at(hWnd).iAdMark2;/* Число рисок */
    COLORREF OldTextColor;;
    HFONT hOldFont;
    gBuffer buff;
    SIZE szText;

    double  z = 0.0, hx = 0.0, hy = 0.0,
            max_y = vMulData2->at(0).at(0), min_y = vMulData2->at(0).at(0),
            max_x = vData1->at(0), min_x = vData1->at(0);
    int     x = 0, y = 0;
    size_t  i = 0;
    /* Границы отображения */
    if(_gMap.at(hWnd).bfEnableFixedXBand == false)
    {
        for(const auto &itir: *vData1)
            if(max_x <= itir) max_x = itir;
            else if(min_x > itir) min_x = itir;
        /* Сохраняем новые границы */
        _gMap.at(hWnd).dMinX = min_x;
        _gMap.at(hWnd).dMaxX = max_x;
    }
    else
    {
        min_x = _gMap.at(hWnd).dMinX;
        max_x = _gMap.at(hWnd).dMaxX;
    }
    if(_gMap.at(hWnd).bfEnableFixedYBand == false)
    {
        for(const auto &extiter: *vMulData2)
            for(const auto &itir: extiter)
                if(max_y <= itir) max_y = itir;
                else if(min_y > itir) min_y = itir;
        /* Сохраняем новые границы */
        _gMap.at(hWnd).dMinY = min_y;
        max_y = _gMap.at(hWnd).dMaxY = max_y;
    }
    else
    {
        min_y = _gMap.at(hWnd).dMinY;
        max_y = _gMap.at(hWnd).dMaxY;
    }
    /* Коррекция масштаба оси Y */
    int expY = 0, expX = 0;
    if(max_y != min_y)
    {
        double e = fabs(max_y) > fabs(min_y)? fabs(max_y) : fabs(min_y);
        while(e < 1.0 && bfEnableScCor)
        {
            e*=10;
            expY++;
        }
        while(e > 999.9 && bfEnableScCor)
        {
            e/=10;
            expY--;
        }
        while(expY%3 != 0) expY--;
        /* Коррекция масштаба оси X */
        e = fabs(max_x) > fabs(min_x)? fabs(max_x) : fabs(min_x);
        while(e < 1.0 && bfEnableScCor)
        {
            e*=10;
            expX++;
        }
        while(e > 999.9 && bfEnableScCor)
        {
            e/=10;
            expX--;
        }
        while(expX%3 != 0) expX--;
        hx = (max_x - min_x)/iMark1;
        hy = (max_y - min_y)/iMark2;
    }
    /* Сдвигаем начало координат */
    LONG iWidth, iHeight;
    gWindowMetric(hWnd, &iWidth, &iHeight);
    POINT pIndent = {GPLOT_LOGICAL_X_BEGIN, GPLOT_LOGICAL_Y_BEGIN};
    SetViewportOrgEx(hdc, pIndent.x*((double)iWidth/GWND_LOGICAL_SIZE),
                          iHeight - pIndent.y*((double)iHeight/GWND_LOGICAL_SIZE), NULL);
    /* Настройка инструментов рисования */
    hOldFont = (HFONT)SelectObject(hdc, (HFONT)_gMap.at(hWnd).hTextFont);
    hOldPen = (HPEN)SelectObject(hdc, (HPEN)hAxisPen);
    OldTextColor = SetTextColor(hdc, _gMap.at(hWnd).crAxisSubscribeColor);
    buff.fixed();
    SetBkMode(hdc, TRANSPARENT);
    /* В массиве только нули, экстренный выход */
    if(max_y == min_y && max_y == 0)
    {
        std::string error_msg = "Maximum and minimum values are equal.";

        GetTextExtentPoint32(hdc, error_msg.data(), error_msg.length(), &szText);
        TextOut(hdc, iPlotSize-szText.cx-iIndent, iPlotSize - iIndent - szText.cy, error_msg.data(), error_msg.length());

        SelectObject(hdc, (HFONT)hOldFont);
        return TRUE;
    }
    /* Рисуем прямоугольную координатную сетку */
    for(int c = 0; c < 2; c++)
    {
        /* Размечаем масштаб оси X */
        if(c == 0) buff.setprecision(_gMap.at(hWnd).iPrec1);
        const int Y = (iPlotSize + 0.5)*c;
        if(bfEnableAxis)
        {
            MoveToEx(hdc, 0, 0+Y, NULL);
            LineTo(hdc, iPlotSize, 0+Y);
        }
        for(z = min_x, i = 0; i <= iMark1; z += hx, i++)
        {
            x = int((z - min_x)*iPlotSize/(max_x - min_x) + 0.5);
            if(bfEnableAxis)
            {
                MoveToEx(hdc, x, -iIndent+Y, NULL);
                LineTo(hdc, x, iIndent+Y);
            }
            if(c == 0 && bfEnableScale)
            {
                buff << z*pow(10, expX);
                GetTextExtentPoint32(hdc, buff.str().data(), buff.str().length(), &szText);
                TextOut(hdc, x-szText.cx + szText.cx/buff.str().length(),
                        y - 1.5*iIndent, buff.str().c_str(), buff.str().length());
            }
        }
        /* Размечаем масштаб оси Y */
        if(c == 0) buff.setprecision(_gMap.at(hWnd).iPrec2);
        const int X = (iPlotSize + 0.5)*c;
        if(bfEnableAxis)
        {
            MoveToEx(hdc, 0+X, iPlotSize, NULL);
            LineTo(hdc, 0+X, 0);
        }
        for (z = min_y, i = 0; i <= iMark2; z += hy, i++)
        {
            y = int((z - min_y)*iPlotSize/(max_y - min_y) + 0.5);
            if(bfEnableAxis)
            {
                MoveToEx(hdc, -iIndent+X, y, NULL);
                LineTo(hdc, iIndent+X, y);
            }
            if(c == 0 && bfEnableScale)
            {
                buff << z*pow(10, expY);
                GetTextExtentPoint32(hdc, buff.str().data(), buff.str().length(), &szText);
                TextOut(hdc, -szText.cx - 1.5*iIndent,
                        y + 2.7*szText.cy/buff.str().length() , buff.str().data(), buff.str().length());
            }
        }
    }
    /* Размечаем сетку, если необходимо */
    SelectObject(hdc, (HPEN)hGridPen);
    if(bfEnableGrid)
    {
        /* Горизонтальные линии */
        for(z = min_y + hy/(iAdMark2+1); z < max_y-0.5*hy/(iAdMark2+1); z += hy/(iAdMark2+1))
        {
            y = int((z - min_y)*iPlotSize/(max_y - min_y) + 0.5);
            MoveToEx(hdc, iIndent, y, NULL);
            LineTo(hdc, iPlotSize-iIndent, y);
        }
        /* Вертикальные линии */
        for(z = min_x + hx/(iAdMark1+1); z < max_x-0.5*hx/(iAdMark1+1); z += hx/(iAdMark1+1))
        {
            x = int((z - min_x)*iPlotSize/(max_x - min_x) + 0.5);
            MoveToEx(hdc, x, iIndent, NULL);
            LineTo(hdc, x, iPlotSize-iIndent);
        }
    }
    /* Строим график */
    SelectObject(hdc, (HPEN)hPlotPen);
    const gVector &xAxis = *vData1;
    const int iMaxPlotNumber = vMulData2->size();
    int iPlotNumber = 1;
    for(const auto &extiter: *vMulData2)
    {
        if(iMaxPlotNumber > 1)
        {
            hPlotPen = CreatePen(PS_SOLID, 0, RGB(255.0*iPlotNumber/iMaxPlotNumber, 0, 0));
            SelectObject(hdc, (HPEN)hPlotPen);
            iPlotNumber++;
        }
        const gVector &yAxis = extiter;
        if(yAxis[0] >= min_y && yAxis[0] <= max_y)
                y = int((yAxis[0] - min_y)*iPlotSize/(max_y - min_y) + 0.5);
            else if(yAxis[0] > max_y)
                y = int(iPlotSize + 0.5);
            else if(yAxis[0] < min_y)
                y = int(0.0 + 0.5);
        if(xAxis[0] >= min_x && xAxis[0] <= max_x)
            x = int((xAxis[0] - min_x)*iPlotSize/(max_x - min_x) + 0.5);
        else if(xAxis[0] > max_x)
            x = int(iPlotSize + 0.5);
        else if(xAxis[0] < min_x)
            x = 0;
        MoveToEx(hdc, x, y, NULL);
        for(i = 1; i < xAxis.size(); i++)
        {
            if(xAxis[i] >= min_x && xAxis[i] <= max_x)
                x = int((xAxis[i] - min_x)*iPlotSize/(max_x - min_x) + 0.5);
            else if(xAxis[i] > max_x)
                x = int(iPlotSize + 0.5);
            else if(xAxis[i] < min_x)
                x = int(0.0);
            if(yAxis[i] >= min_y && yAxis[i] <= max_y)
                y = int((yAxis[i] - min_y)*iPlotSize/(max_y - min_y) + 0.5);
            else if(yAxis[i] > max_y)
                y = int(iPlotSize + 0.5);
            else if(yAxis[i] < min_y)
                y = 0;
            LineTo(hdc, x, y);
        }
        if(iMaxPlotNumber > 1) DeleteObject(hPlotPen);
    }
    /* Выводим кресты */
    if(_gMap.at(hWnd).bfEnableCross == true)
    {
        const gVector &xAxis = _gMap.at(hWnd).vCrossX;
        const gVector &yAxis = _gMap.at(hWnd).vCrossY;
        for(auto X = xAxis.begin(), Y = yAxis.begin();
            X != xAxis.end() || Y != yAxis.end(); X++, Y++)
        {
            if(*X >= min_x && *X <= max_x)
                x = int((*X - min_x)*iPlotSize/(max_x - min_x) + 0.5);
            else if(*X > max_x)
                x = int(iPlotSize + 0.5);
            else if(*X < min_x)
                x = int(0.0);
            if(*Y >= min_y && *Y <= max_y)
                y = int((*Y - min_y)*iPlotSize/(max_y - min_y) + 0.5);
            else if(*Y > max_y)
                y = int(iPlotSize + 0.5);
            else if(*Y < min_y)
                y = 0;
            SelectBrush(hdc, GetStockBrush(BLACK_BRUSH));
            Ellipse(hdc, x-iIndent, y+iIndent, x+iIndent, y-iIndent);
        }
        _gMap.at(hWnd).bfEnableCross = false;
    }
    /* Выводим дополнительную информацию */
    SetTextColor(hdc, _gMap.at(hWnd).crAdInfoColor);
    int s = 0;
    if(_gMap.at(hWnd).bfEnableAdInfo)
    {
        gInfoVector vInfo;
        gSplit(_gMap.at(hWnd).strAdInfo, &vInfo);

        ALIGMENT aligment = _gMap.at(hWnd).iSubInfoAligment;
        for(const auto &it: vInfo)
        {
            GetTextExtentPoint32(hdc, it.data(), it.length(), &szText);
            switch(aligment)
            {
                case ALIGMENT::RIGHT: /* Right */
                    TextOut(hdc, iIndent, iPlotSize - iIndent - szText.cy*(s++), it.data(), it.length());
                    break;
                default:
                    TextOut(hdc, iPlotSize-szText.cx-iIndent, iPlotSize - iIndent - szText.cy*(s++), it.data(), it.length());
            }
        }
    }
    /* Выводим масштабирующий множитель */
    if(expY != 0 && bfEnableScCor)
    {
        buff << "y: e" << expY;
        GetTextExtentPoint32(hdc, buff.str().data(), buff.str().length(), &szText);
        TextOut(hdc, iPlotSize-szText.cx-iIndent, iPlotSize - szText.cy*(s++), buff.str().data(), buff.str().length());
    }
    if(expX != 0 && bfEnableScCor)
    {
        buff << "x: e" << expX;
        GetTextExtentPoint32(hdc, buff.str().data(), buff.str().length(), &szText);
        TextOut(hdc, iPlotSize-szText.cx-iIndent, iPlotSize - szText.cy*(s++), buff.str().data(), buff.str().length());
    }
    /* Выводим информацию об осях */
    if(_gMap.at(hWnd).bfEnableTitles == true)
    {
        SetTextColor(hdc, _gMap.at(hWnd).crAdInfoColor);
        //SelectBrush(hdc, GetStockBrush(BLACK_BRUSH));
        std::string &xstr = _gMap.at(hWnd).xAxisInfo;
        std::string &ystr = _gMap.at(hWnd).yAxisInfo;
        GetTextExtentPoint32(hdc, xstr.data(), xstr.length(), &szText);

        LONG xTitleShiftToY = -szText.cy;   /* Сдвиги подобраны эмпирически */
        LONG yTitleShiftToX = -GPLOT_LOGICAL_X_BEGIN + 0.8*szText.cy;
        RECT xrc{0, xTitleShiftToY, GPLOT_LOGICAL_SIZE, xTitleShiftToY-szText.cy}; /* left top right bottom */

        DrawText(hdc, xstr.c_str(), xstr.length(), &xrc, DT_CENTER | DT_SINGLELINE);
        //Rectangle(hdc, xrc.left, xrc.top, xrc.right, xrc.bottom);

        PLOGFONT plf = (PLOGFONT)LocalAlloc(LPTR, sizeof(LOGFONT));
        GetObject (_gMap.at(hWnd).hTextFont, sizeof(LOGFONT), plf);
        plf->lfEscapement = -900;
        HFONT hVFont = CreateFontIndirect(plf);

        SelectObject(hdc, hVFont);
        GetTextExtentPoint32(hdc, ystr.data(), ystr.length(), &szText);
        RECT yrc{yTitleShiftToX - szText.cy, GPLOT_LOGICAL_SIZE, yTitleShiftToX, GPLOT_LOGICAL_SIZE / 2 - 0.25*static_cast<double>(ystr.length()*szText.cy)};
        //Rectangle(hdc, yrc.left, yrc.top, yrc.right, yrc.bottom);

        DrawText(hdc, ystr.c_str(), ystr.length(), &yrc, DT_SINGLELINE | DT_BOTTOM);
        LocalFree((LOCALHANDLE)plf);
        DeleteObject(hVFont);
    }
    /* Выводим Title */
    if(_gMap.at(hWnd).bfEnableMainTitle == true)
    {
        std::string &str = _gMap.at(hWnd).MainTitle;
        SelectObject(hdc, (HFONT)_gMap.at(hWnd).hTextFont);
        SetTextColor(hdc, _gMap.at(hWnd).crAdInfoColor);
        GetTextExtentPoint32(hdc, str.data(), str.length(), &szText);
        RECT rc{0, GPLOT_LOGICAL_SIZE + szText.cy + iIndent, GPLOT_LOGICAL_SIZE, GPLOT_LOGICAL_SIZE + iIndent}; /* left top right bottom */
        //SelectBrush(hdc, GetStockBrush(BLACK_BRUSH));
        //Rectangle(hdc, rc.left, rc.top, rc.right, rc.bottom);
        DrawText(hdc, str.c_str(), str.length(), &rc, DT_CENTER | DT_SINGLELINE);
    }

    SelectObject(hdc, (HPEN)hOldPen);
    SelectObject(hdc, (HFONT)hOldFont);
    SetTextColor(hdc, OldTextColor);
    return TRUE;
}

BOOL gwin::gDrawPlot(HWND hWnd, HDC &hdc, const gVector *vData1, const gVector *vData2)
{
    const gMulVector vMulData2{*vData2};
    return gMulDrawPlot(hWnd, hdc, vData1, &vMulData2);
}

BOOL gwin::gEmbedBitmap(HWND hWnd, HDC &hdc)
{
    LONG iWidth, iHeight;
    gWindowMetric(hWnd, &iWidth, &iHeight);
    HDC memhdc;
    if(_gMap.find(hWnd) != _gMap.end())
    {
        memhdc = CreateCompatibleDC(hdc);
        SelectObject(memhdc, _gMap.at(hWnd).hBitMap);
        BitBlt(hdc, 0, 0, iWidth, iHeight, memhdc, 0, 0, SRCCOPY);
        DeleteDC(memhdc);
        return TRUE;
    }
    return FALSE;
}

//break a sentence into words
BOOL gwin::gSplit(const std::string& s, gInfoVector *vInfo){
    if(s.empty()) return FALSE;
    typedef std::string::const_iterator iter;
    iter i = s.begin();
    while(i!=s.end()){
        i = std::find_if(i, s.end(), [=](char c){ return !std::isspace(c); }); // find the beginning of a word
        iter j= std::find_if(i, s.end(), [=](char c){return (c == '\n')? true : false; }); // find the end of the same word
        if(i!=s.end()){
            vInfo->push_back(std::string(i, j)); //insert the word into vector
            i = j; // repeat 1,2,3 on the rest of the line.
        }
    }
    return TRUE;
}

VOID gwin::_gInsertSpaces(std::string &str)
{
    if(str.empty())
        return;
    size_t c = 0;
    while(c != str.length() - 1)
        if(c++ % 2 != 0)
            str.insert(begin(str) + c, ' ');
}

/* *************** */
/* Оконная функция */
/* *************** */

LRESULT CALLBACK gwin::_gWinProcess(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
        HANDLE_MSG(hWnd, WM_PAINT, _gOnPaint);
        HANDLE_MSG(hWnd, WM_LBUTTONDOWN, _gOnLButtonDown);
        //HANDLE_MSG(hWnd, WM_SETFOCUS, _gOnSetFocus);
        //HANDLE_MSG(hWnd, WM_COMMAND, _gOnCommand);
        //HANDLE_MSG(hWnd, WM_TIMER, MainWindow_OnTimer);
        case WM_CREATE:
            break;
        default:
            return DefWindowProc (hWnd, message, wParam, lParam);
    }
    return 0;
}

VOID gwin::_gOnPaint(HWND hWnd)
{
    HDC hdc;
    PAINTSTRUCT ps;
    hdc = BeginPaint(hWnd, &ps);
        gEmbedBitmap(hWnd, hdc);
    EndPaint(hWnd, &ps);
}

VOID gwin::_gOnLButtonDown(HWND hWnd, BOOL, INT x, INT y, UINT)
{
    //static CONST LONG iPlotSize = GPLOT_LOGICAL_SIZE;
    //if(_gMap.find(hWnd) == _gMap.end())
    //    return;
    //LONG iWidth, iHeight;
    //gWindowMetric(hWnd, &iWidth, &iHeight);
    //_gMap.at(hWnd).vCrossX
    //int(x*GPLOT_LOGICAL_SIZE/iWidth+0.5) << std::endl << int(y*GPLOT_LOGICAL_SIZE/iHeight+0.5);
    //gAdditionalInfo(hWnd, buff.str().data());
    //InvalidateRect(hWnd, NULL, FALSE);
}
