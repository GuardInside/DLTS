#include "variable.h"
#include "dlts_math.h"

vector<double>              xAxisDLTS;
vector<vector<double>>      yAxisDLTS;
vector<double>              xAxisITS;
vector<vector<double>>      yAxisITS;
vector<double>              xAxisLD;
vector<vector<double>>      yAxisITS;
vector<double>              xAxisAr;
vector<double>              yAxisAr;
vector<double>              yAxisArMSQ;
vector<double>              CorTc;
vector<double>              TimeAxis;


vector<vector<double>>              SavedRelaxations;   // Хранит все сохраненные и загруженные релаксации
//vector<double>                      TimeAxis;
vector<double>                      SavedCapacity;      // Хранит все сохраненные или загруженные значения емкости
//atomic_size_t index_measurment{0};
atomic_size_t index_relax{0}; //Номер текущей релаксации для отображения
atomic_size_t index_range{0}; //Номер текущего диапазона
atomic<mode>  index_mode{DLTS}; //Режим работы программы DLTS или ITS
atomic_size_t index_w4{0}; //Отображать DLTS или гр. Аррениуса
atomic<int32> index_w2{0};//Смещение номера порта ai_port при отображении в реальном времени

const string        range[] = {"±10", "±5", "±0.5", "±0.05"};
const int           int_range_sula[] = {10, 30, 100, 300, 1000};
const int           int_pre_amplifier[] = {1, 3, 10, 30, 100};
const string        strHeatingRange[] = {"Off", "Low", "Med", "High"};
      string        FileSaveName;
      string        FileSavePath;
const string        FileSaveExt{".dlts"};

double dEfMass = ELECTRON_MASS;
double dFactorG = 1;
double dImpurity = 1e15;

double itsTemperature = 0.0; /* Температура в режиме ITS */
unsigned int id_DAQ = 0;
int32 ai_port_measurement = 0;
int32 ai_port_pulse = 0;
int32 ai_port_capacity = 0;
int32 pfi_ttl_port = 0;
uInt32 measure_time_DAQ = 0; //Время измерения в мс
uInt32 averaging_DAQ = 0;    //Число отсчетов для получения одного измерения
float64 rate_DAQ = 0.0;      //Сэмплов в секунду
float64 gate_DAQ = 0.0;      //Длительность запирающего импульса
/* Настройки SULA */
int RANGE_SULA_index = 0;
int PRE_AMP_GAIN_SULA_index = 0;
/* Настройки аппроксимации */
bool    bspline::enable{false};
bool    bspline::enable2{false};
size_t  bspline::order{4};
size_t  bspline::ncoeffs{12};
/* Флаги */
atomic_bool start{false};            //Нажата кнопка старт
atomic_bool stability{false};        //Температура стабилизировалась вблизи сетпоинта
atomic_bool bfNewfile{true};         //Создавать ли новый файл при старте эксперимента?
atomic_bool fix_temp{false};         //Фиксация температуры
/* Меню */
bool menu::divide{false};
bool menu::automatic{true};
//atomic_bool normaliz_dlts{false};

/* Параметры коррелятора */
int WeightType = DoubleBoxCar;
double correlation_alpha = 0.1;
double correlation_c = 1.0;
double correlation_width = 1.0; /* В мкс */
double* correlation_t1 = nullptr;
/* Описатели объектов */
HINSTANCE                   hInst;      //Описатель текущего приложения
HWND                        hMainWindow;
HWND                        hGraph;     //Описатель окна графика температуры
HWND                        hRelax;     //Описатель окна графика релаксации
HWND                        hGraph_DAQ; //Описатель окна графика сигнала с DAQ
HWND                        hGraph_DLTS;//Описатель окна графика DLTS
HWND                        hProgress;  //Прогресс чтения данных
CRITICAL_SECTION            csSavedData;
HANDLE                      hDownloadEvent;
